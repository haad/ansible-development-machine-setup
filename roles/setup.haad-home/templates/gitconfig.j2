# set your user tokens as environment variables, such as ~/.secrets
# See the README for examples.
[init]
  defaultBranch = main

[color]
  ui = always
  pager = true
  diff = always
  interactive = always

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[mergetool]
  prompt = false

[merge]
  summary = true
  verbosity = 1

[apply]
  whitespace = nowarn

[branch]
  autosetupmerge = true

[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = tracking

[pull]
  rebase = true

[git-up "fetch"]
  all = true

#[pager]
#  log  = diffr | less -R -N
#  show = diffr --line-numbers | less -R -N
#  diff = diffr --line-numbers | less -R -N

[pager]
  diff = delta -n
  log = delta -n
  reflog = delta -n
  show = delta -n

[interactive]
  diffFilter = delta -n --color-only --features=interactive

[core]
  #pager = less -R
  autocrlf = false
  editor = nvim

[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  algorithm = patience

[include]
  path = .gitconfig.user

[credential]
  helper = osxkeychain

[user]
  name = Adam Hamsik
  email = adam.hamsik@lablabs.io

[gitreview]
  username = adam.hamsik@lablabs.io
  username = haad


# [interactive]
#     diffFilter = delta --color-only

[alias]
  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -v                     # branch (verbose)

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  amend = commit --amend            # ammend your last commit
  ammend = commit --amend           # ammend your last commit

  # diff
  d = diff                          # diff unstaged changes
  dc = diff --cached                # diff staged changes
  last = diff HEAD^                 # diff last committed change

  # log
  #l = log --graph --date=short
  #changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  #short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  #simple = log --pretty=format:\" * %s\"
  #shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  filelog = log -u                  # show changes to a file
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # find file in repo
  f = "!git ls-files | grep -i"

  # show file history with diffs
  fl = log -u

  ## Log aliases
  # List oneline commits showing relative dates
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

  # List commits showing changed files
  ll = log  --decorate --stat

  # Generate nice log graph
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%C(bold blue)<%an>%Creset' --abbrev-commit

  ## Diff

  # Show diff of last commit
  dlc = diff --cached HEAD^
  pr = pull --recurse-submodules